from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import asyncio
from sqlalchemy import Column, Integer, String

from app.core.config import settings
from app.database.database import get_db
from app.models.event import Event
from app.models.promotion import Promotion
from app.models.feedback import Feedback
from app.models.favorite import Favorite
from app.models.subscriber import Subscriber
from app.models.base import BaseModel

CATEGORIES = [
    "–í–µ—á–µ—Ä–∏–Ω–∫–∞",
    "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "–í—Å—Ç—Ä–µ—á–∞",
    "–ê–∫—Ü–∏—è",
    "–î—Ä—É–≥–æ–µ"
]

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserLang(BaseModel):
    __tablename__ = "user_langs"
    user_id = Column(Integer, unique=True, nullable=False)
    lang = Column(String(5), default="ru")

# –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
TRANSLATIONS = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! üëã\n–¢—ã –≤ –±–æ—Ç–µ Sxodim.Aktau ‚Äî –∞—Ñ–∏—à–µ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ—Ä–æ–¥–µ –ê–∫—Ç–∞—É üá∞üáø\n\nüìÜ –¢—É—Ç —Ç—ã –Ω–∞–π–¥—ë—à—å:\n‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –≤—Å—Ç—Ä–µ—á–∏\n‚Äî –∞–∫—Ü–∏–∏ –≤ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –∏ –º–µ—Å—Ç–∞—Ö –æ—Ç–¥—ã—Ö–∞\n‚Äî –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n/upcoming_event ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n/promotions_in_public_catering ‚Äî –∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö\n/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n/help ‚Äî –ø–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞\n\n–û—Å—Ç–∞–≤–∞–π—Å—è —Å –Ω–∞–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! üéä",
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Select language:",
        "lang_set": "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!"
    },
    "kz": {
        "welcome": "–°”ô–ª–µ–º! üëã\n–°–µ–Ω Sxodim.Aktau –±–æ—Ç—ã–Ω–¥–∞—Å—ã“£ ‚Äî –ê“õ—Ç–∞—É–¥–∞“ì—ã –µ“£ “õ—ã–∑—ã“õ—Ç—ã —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä–¥—ã“£ –∞—Ñ–∏—à–∞—Å—ã üá∞üáø\n\nüìÜ –ú“±–Ω–¥–∞ —Å–µ–Ω —Ç–∞–±–∞—Å—ã“£:\n‚Äî –∂–∞“õ—ã–Ω –∫–µ—à—Ç–µ—Ä, –∫–æ–Ω—Ü–µ—Ä—Ç—Ç–µ—Ä –∂”ô–Ω–µ –∫–µ–∑–¥–µ—Å—É–ª–µ—Ä\n‚Äî –¥”ô–º—Ö–∞–Ω–∞–ª–∞—Ä –º–µ–Ω –º–µ–π—Ä–∞–º—Ö–∞–Ω–∞–ª–∞—Ä–¥–∞“ì—ã –∞–∫—Ü–∏—è–ª–∞—Ä\n‚Äî –ø–∞–π–¥–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –∂”ô–Ω–µ –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å\n\n“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n/upcoming_event ‚Äî –∂–∞“õ—ã–Ω —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä\n/promotions_in_public_catering ‚Äî –∞–∫—Ü–∏—è–ª–∞—Ä\n/feedback ‚Äî –ø—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É\n/help ‚Äî –∫”©–º–µ–∫ –∂”ô–Ω–µ –∞–Ω—ã“õ—Ç–∞–º–∞\n\n–ë—ñ–∑–±–µ–Ω –±—ñ—Ä–≥–µ –±–æ–ª –∂”ô–Ω–µ –µ—à—Ç–µ“£–µ–Ω—ñ –∂—ñ–±–µ—Ä—ñ–ø –∞–ª–º–∞! üéä",
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Select language:",
        "lang_set": "–¢—ñ–ª —Å”ô—Ç—Ç—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ!"
    },
    "en": {
        "welcome": "Hi! üëã\nYou are in Sxodim.Aktau bot ‚Äî the poster of the most interesting events in Aktau üá∞üáø\n\nüìÜ Here you will find:\n‚Äî upcoming parties, concerts and meetings\n‚Äî promotions in cafes, restaurants and leisure places\n‚Äî useful information and feedback\n\nAvailable commands:\n/upcoming_event ‚Äî upcoming events\n/promotions_in_public_catering ‚Äî promotions\n/feedback ‚Äî leave feedback\n/help ‚Äî help and info\n\nStay with us and don't miss anything interesting! üéä",
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Select language:",
        "lang_set": "Language changed successfully!"
    }
}

LANGS = [
    ("–†—É—Å—Å–∫–∏–π", "ru"),
    ("“ö–∞–∑–∞“õ—à–∞", "kz"),
    ("English", "en")
]

# Initialize bot and dispatcher
bot = Bot(token=settings.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States
class EventStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_location = State()

class PromotionStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_venue = State()
    waiting_for_dates = State()

class FeedbackStates(StatesGroup):
    waiting_for_message = State()

class EditEventStates(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()
    event_id = State()
    field = State()

class EditPromoStates(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()
    promo_id = State()
    field = State()

USER_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), KeyboardButton(text="–ê–∫—Ü–∏–∏")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫"), KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
        [KeyboardButton(text="–Ø–∑—ã–∫")]
    ],
    resize_keyboard=True
)

ADMIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), KeyboardButton(text="–ê–∫—Ü–∏–∏")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫"), KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
        [KeyboardButton(text="–Ø–∑—ã–∫")],
        [KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞")]
    ],
    resize_keyboard=True
)

# Command handlers
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    lang = get_user_lang(message.from_user.id)
    await message.answer(TRANSLATIONS[lang]["welcome"], reply_markup=ReplyKeyboardRemove())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. /upcoming_event - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "2. /feedback - –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "3. /promotions_in_public_catering - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö\n\n"
        "–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    )
    await message.answer(help_text)

@dp.message(Command("upcoming_event"))
async def cmd_upcoming_events(message: types.Message):
    db = next(get_db())
    events = db.query(Event).filter(Event.date >= datetime.utcnow()).order_by(Event.date).limit(5).all()
    
    if not events:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    for event in events:
        event_text = (
            f"üéâ {event.title}\n\n"
            f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
            f"{event.description}"
        )
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{event.id}")],
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{event.id}")],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=event.title)]
            ]
        )
        await message.answer(event_text, reply_markup=inline_kb)

@dp.message(Command("feedback"))
async def cmd_feedback(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
    await state.set_state(FeedbackStates.waiting_for_message)

@dp.message(FeedbackStates.waiting_for_message)
async def process_feedback(message: types.Message, state: FSMContext):
    db = next(get_db())
    feedback = Feedback(user_id=message.from_user.id, message=message.text)
    db.add(feedback)
    db.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè")
    await state.clear()

@dp.message(Command("promotions_in_public_catering"))
async def cmd_promotions(message: types.Message):
    db = next(get_db())
    promotions = db.query(Promotion).filter(Promotion.is_active == True).all()
    
    if not promotions:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.")
        return

    for promotion in promotions:
        promotion_text = (
            f"üè∑ {promotion.title}\n\n"
            f"üìù {promotion.description}\n"
            f"üè™ –ú–µ—Å—Ç–æ: {promotion.location}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {promotion.end_date.strftime('%d.%m.%Y')}"
        )
        await message.answer(promotion_text)

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in settings.get_admin_ids():
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="add_event"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", callback_data="add_promotion")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="list_events"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π", callback_data="list_promotions")
        ]
    ])
    
    await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")],
            [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", reply_markup=keyboard)
    await state.set_state("search:choose_mode")

@dp.message(lambda m: m.text == "–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")
async def search_by_date(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ú–µ–Ω—é")]], resize_keyboard=True))
    await state.set_state("search:wait_date")

@dp.message(lambda m: m.text == "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def search_by_category(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES] + [[KeyboardButton(text="–ú–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state("search:wait_category")

@dp.message(lambda m: m.text == "–ú–µ–Ω—é")
async def back_to_menu(message: types.Message):
    lang = get_user_lang(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardRemove())

@dp.message(lambda m: m.text in CATEGORIES)
async def process_search_category(message: types.Message, state: FSMContext):
    category = message.text
    db = next(get_db())
    events = db.query(Event).filter(Event.description.ilike(f"%{category}%")).all()
    if not events:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for event in events:
            event_text = (
                f"üéâ {event.title}\n\n"
                f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
                f"{event.description}"
            )
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{event.id}")],
                    [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{event.id}")],
                    [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=event.title)]
                ]
            )
            await message.answer(event_text, reply_markup=inline_kb)
    await state.clear()

@dp.message()
async def process_search_date(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "search:wait_date":
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        db = next(get_db())
        events = db.query(Event).filter(Event.date >= date, Event.date < date.replace(hour=23, minute=59, second=59)).all()
        if not events:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            for event in events:
                event_text = (
                    f"üéâ {event.title}\n\n"
                    f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
                    f"{event.description}"
                )
                inline_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{event.id}")],
                        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{event.id}")],
                        [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=event.title)]
                    ]
                )
                await message.answer(event_text, reply_markup=inline_kb)
        await state.clear()

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    db = next(get_db())
    user_id = message.from_user.id
    exists = db.query(Subscriber).filter_by(user_id=user_id).first()
    if not exists:
        db.add(Subscriber(user_id=user_id))
        db.commit()
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö!")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@dp.message(Command("favorites"))
async def cmd_favorites(message: types.Message):
    db = next(get_db())
    favs = db.query(Favorite).filter_by(user_id=message.from_user.id).all()
    if not favs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    for fav in favs:
        event = db.query(Event).filter_by(id=fav.event_id).first()
        if event:
            event_text = (
                f"üéâ {event.title}\n\n"
                f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
                f"{event.description}"
            )
            await message.answer(event_text)

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message, command: CommandObject):
    if message.from_user.id not in settings.get_admin_ids():
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    text = command.args or None
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /broadcast –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
        return
    db = next(get_db())
    subscribers = db.query(Subscriber).all()
    count = 0
    for sub in subscribers:
        try:
            await bot.send_message(sub.user_id, f"üì¢ {text}")
            count += 1
        except Exception:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")

@dp.message(Command("faq"))
async def cmd_faq(message: types.Message):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</b>\n"
        "‚Äî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ /admin.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?</b>\n"
        "‚Äî –ù–∞–∂–º–∏—Ç–µ ‚≠êÔ∏è –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º.\n\n"
        "<b>–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É?</b>\n"
        "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe.\n\n"
        "<b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>\n"
        "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /contact."
    )
    await message.answer(faq_text, parse_mode="HTML")

@dp.message(Command("contact"))
async def cmd_contact(message: types.Message):
    await message.answer("üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: @your_support_username –∏–ª–∏ –Ω–∞ email: support@example.com")

@dp.message(Command("language"))
async def cmd_language(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=title, callback_data=f"lang_{code}")] for title, code in LANGS
        ]
    )
    await message.answer(TRANSLATIONS["ru"]["choose_lang"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_language(callback_query: types.CallbackQuery):
    lang = callback_query.data.split("_", 1)[1]
    db = next(get_db())
    user_id = callback_query.from_user.id
    user_lang = db.query(UserLang).filter_by(user_id=user_id).first()
    if not user_lang:
        db.add(UserLang(user_id=user_id, lang=lang))
    else:
        user_lang.lang = lang
    db.commit()
    await callback_query.answer(TRANSLATIONS[lang]["lang_set"])

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.from_user.id not in settings.get_admin_ids():
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    db = next(get_db())
    users = db.query(UserLang).count()
    subscribers = db.query(Subscriber).count()
    events = db.query(Event).count()
    promotions = db.query(Promotion).count()
    favorites = db.query(Favorite).count()
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users}</b>\n"
        f"üîî –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{subscribers}</b>\n"
        f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{events}</b>\n"
        f"üéÅ –ê–∫—Ü–∏–π: <b>{promotions}</b>\n"
        f"‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: <b>{favorites}</b>"
    )
    await message.answer(text, parse_mode="HTML")

# Event handlers
@dp.callback_query(lambda c: c.data == "add_event")
async def process_add_event(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventStates.waiting_for_title)

@dp.message(EventStates.waiting_for_title)
async def process_event_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventStates.waiting_for_description)

@dp.message(EventStates.waiting_for_description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(EventStates.waiting_for_date)

@dp.message(EventStates.waiting_for_date)
async def process_event_date(message: types.Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(date=date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await state.set_state(EventStates.waiting_for_location)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@dp.message(EventStates.waiting_for_location)
async def process_event_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    db = next(get_db())
    
    event = Event(
        title=data['title'],
        description=data['description'],
        date=data['date'],
        location=message.text
    )
    
    db.add(event)
    db.commit()
    
    await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

# Promotion handlers
@dp.callback_query(lambda c: c.data == "add_promotion")
async def process_add_promotion(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(PromotionStates.waiting_for_title)

@dp.message(PromotionStates.waiting_for_title)
async def process_promotion_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(PromotionStates.waiting_for_description)

@dp.message(PromotionStates.waiting_for_description)
async def process_promotion_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:")
    await state.set_state(PromotionStates.waiting_for_venue)

@dp.message(PromotionStates.waiting_for_venue)
async def process_promotion_venue(message: types.Message, state: FSMContext):
    await state.update_data(venue=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–æ 31.12.2024'):")
    await state.set_state(PromotionStates.waiting_for_dates)

@dp.message(PromotionStates.waiting_for_dates)
async def process_promotion_dates(message: types.Message, state: FSMContext):
    data = await state.get_data()
    db = next(get_db())
    
    promotion = Promotion(
        title=data['title'],
        description=data['description'],
        venue=data['venue'],
        valid_until=message.text
    )
    
    db.add(promotion)
    db.commit()
    
    await message.answer("‚úÖ –ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

# List handlers
@dp.callback_query(lambda c: c.data == "list_events")
async def process_list_events(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    db = next(get_db())
    events = db.query(Event).order_by(Event.date).all()
    if not events:
        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç.")
        return
    for event in events:
        event_text = (
            f"üéâ {event.title}\n\n"
            f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
            f"{event.description}"
        )
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{event.id}")],
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{event.id}")],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=event.title)]
            ]
        )
        await callback_query.message.answer(event_text, reply_markup=inline_kb)

@dp.callback_query(lambda c: c.data == "list_promotions")
async def process_list_promotions(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    db = next(get_db())
    promotions = db.query(Promotion).all()
    if not promotions:
        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –ø—É—Å—Ç.")
        return
    for promotion in promotions:
        promotion_text = (
            f"üéÅ {promotion.title}\n\n"
            f"üè™ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {promotion.venue}\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: {promotion.valid_until}\n\n"
            f"{promotion.description}"
        )
        await callback_query.message.answer(promotion_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.callback_query(lambda c: c.data.startswith("fav_"))
async def add_to_favorites(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split("_", 1)[1])
    db = next(get_db())
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
    exists = db.query(Favorite).filter_by(user_id=user_id, event_id=event_id).first()
    if not exists:
        db.add(Favorite(user_id=user_id, event_id=event_id))
        db.commit()
        await callback_query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await callback_query.answer("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query(lambda c: c.data.startswith("delete_event_"))
async def delete_event(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    event_id = int(callback_query.data.split("_", 2)[2])
    db = next(get_db())
    event = db.query(Event).filter_by(id=event_id).first()
    if event:
        db.delete(event)
        db.commit()
        await callback_query.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback_query.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ—à–∞–≥–æ–≤–æ)
@dp.callback_query(lambda c: c.data.startswith("edit_event_"))
async def edit_event_start(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    event_id = int(callback_query.data.split("_", 2)[2])
    await state.update_data(event_id=event_id)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_title")],
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
            [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_field_date")],
            [InlineKeyboardButton(text="–ú–µ—Å—Ç–æ", callback_data="edit_field_location")]
        ]
    )
    await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(EditEventStates.waiting_for_field)

@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
async def edit_event_field(callback_query: types.CallbackQuery, state: FSMContext):
    field = callback_query.data.split("_", 2)[2]
    await state.update_data(field=field)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}")
    await state.set_state(EditEventStates.waiting_for_value)

@dp.message(EditEventStates.waiting_for_value)
async def edit_event_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event_id = data["event_id"]
    field = data["field"]
    db = next(get_db())
    event = db.query(Event).filter_by(id=event_id).first()
    if not event:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    value = message.text
    if field == "date":
        try:
            value = datetime.strptime(value, "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return
    setattr(event, field, value)
    db.commit()
    await message.answer(f"–ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith("delete_promo_"))
async def delete_promotion(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    promo_id = int(callback_query.data.split("_", 2)[2])
    db = next(get_db())
    promo = db.query(Promotion).filter_by(id=promo_id).first()
    if promo:
        db.delete(promo)
        db.commit()
        await callback_query.message.answer("–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback_query.message.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ (–ø–æ—à–∞–≥–æ–≤–æ)
@dp.callback_query(lambda c: c.data.startswith("edit_promo_"))
async def edit_promo_start(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in settings.get_admin_ids():
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    promo_id = int(callback_query.data.split("_", 2)[2])
    await state.update_data(promo_id=promo_id)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_promo_field_title")],
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_promo_field_description")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ–¥–µ–Ω–∏–µ", callback_data="edit_promo_field_venue")],
            [InlineKeyboardButton(text="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="edit_promo_field_valid_until")]
        ]
    )
    await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(EditPromoStates.waiting_for_field)

@dp.callback_query(lambda c: c.data.startswith("edit_promo_field_"))
async def edit_promo_field(callback_query: types.CallbackQuery, state: FSMContext):
    field = callback_query.data.split("_", 3)[3]
    await state.update_data(field=field)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}")
    await state.set_state(EditPromoStates.waiting_for_value)

@dp.message(EditPromoStates.waiting_for_value)
async def edit_promo_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    promo_id = data["promo_id"]
    field = data["field"]
    db = next(get_db())
    promo = db.query(Promotion).filter_by(id=promo_id).first()
    if not promo:
        await message.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    value = message.text
    setattr(promo, field, value)
    db.commit()
    await message.answer(f"–ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_lang(user_id):
    db = next(get_db())
    user_lang = db.query(UserLang).filter_by(user_id=user_id).first()
    return user_lang.lang if user_lang else "ru"

async def start_bot():
    print("Bot polling started!")
    await dp.start_polling(bot) 